Sources\Correlacion.o:     file format elf32-littlearmSources\Correlacion.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .text.pdwfnCorrelacion 00000190  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE  4 .text.dwfnFindEnergy 00000054  00000000  00000000  000001c4  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  5 .text.wfnFindMaxPeakLocation 00000080  00000000  00000000  00000218  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  6 .text.wfnFindPeriod 00000254  00000000  00000000  00000298  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE  7 .bss.dwaResultado.4073 00002edc  00000000  00000000  000004ec  2**2                  ALLOC  8 .debug_info   0000026a  00000000  00000000  000004ec  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING  9 .debug_abbrev 0000006f  00000000  00000000  00000756  2**0                  CONTENTS, READONLY, DEBUGGING 10 .debug_loc    000000e2  00000000  00000000  000007c5  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 11 .debug_aranges 00000038  00000000  00000000  000008a7  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 12 .debug_macinfo 000024fa  00000000  00000000  000008df  2**0                  CONTENTS, READONLY, DEBUGGING 13 .debug_line   00000162  00000000  00000000  00002dd9  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 14 .debug_str    0000022b  00000000  00000000  00002f3b  2**0                  CONTENTS, READONLY, DEBUGGING 15 .comment      0000007a  00000000  00000000  00003166  2**0                  CONTENTS, READONLY 16 .ARM.attributes 00000031  00000000  00000000  000031e0  2**0                  CONTENTS, READONLY 17 .debug_frame  00000090  00000000  00000000  00003214  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 Correlacion.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .text.pdwfnCorrelacion	00000000 .text.pdwfnCorrelacion00000000 l     O .bss.dwaResultado.4073	00002edc dwaResultado.407300000000 l    d  .text.dwfnFindEnergy	00000000 .text.dwfnFindEnergy00000000 l    d  .text.wfnFindMaxPeakLocation	00000000 .text.wfnFindMaxPeakLocation00000000 l    d  .text.wfnFindPeriod	00000000 .text.wfnFindPeriod00000000 l    d  .bss.dwaResultado.4073	00000000 .bss.dwaResultado.407300000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000000 g     F .text.pdwfnCorrelacion	00000190 pdwfnCorrelacion00000000 g     F .text.dwfnFindEnergy	00000054 dwfnFindEnergy00000000 g     F .text.wfnFindMaxPeakLocation	00000080 wfnFindMaxPeakLocation00000000 g     F .text.wfnFindPeriod	00000254 wfnFindPeriodDisassembly of section .text.pdwfnCorrelacion:00000000 <pdwfnCorrelacion>:#include "Correlacion.h"unsigned long* pdwfnCorrelacion (unsigned char * pbBufferSistema, unsigned char * pbBufferEntrada){   0:	b580      	push	{r7, lr}   2:	b086      	sub	sp, #24   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]	unsigned short wInstancias = SIZE; /*Contador del ciclo principal*/   a:	1c3b      	adds	r3, r7, #0   c:	3316      	adds	r3, #22   e:	4a5d      	ldr	r2, [pc, #372]	; (184 <pdwfnCorrelacion+0x184>)  10:	801a      	strh	r2, [r3, #0]	unsigned short wCounter = 0; /*Contador para los ciclos de sumas de productos*/  12:	1c3b      	adds	r3, r7, #0  14:	3314      	adds	r3, #20  16:	2200      	movs	r2, #0  18:	801a      	strh	r2, [r3, #0]	unsigned short wSoPsCounter = 0; /*Contador de las sumas de productos que se harn/hicieron*/  1a:	1c3b      	adds	r3, r7, #0  1c:	3312      	adds	r3, #18  1e:	2200      	movs	r2, #0  20:	801a      	strh	r2, [r3, #0]	static unsigned long dwaResultado[SIZE*2 - 1]; /*Arreglo de retorno*/	unsigned long *pdwResultado = &dwaResultado[0];  22:	4b59      	ldr	r3, [pc, #356]	; (188 <pdwfnCorrelacion+0x188>)  24:	60fb      	str	r3, [r7, #12]	while(wInstancias--)  26:	e040      	b.n	aa <pdwfnCorrelacion+0xaa>	{		wCounter = ++wSoPsCounter; /*Se lleva la cuenta de cuantas sumas de productos deben hacerse ahora*/  28:	1c3b      	adds	r3, r7, #0  2a:	3312      	adds	r3, #18  2c:	1c3a      	adds	r2, r7, #0  2e:	3212      	adds	r2, #18  30:	8812      	ldrh	r2, [r2, #0]  32:	3201      	adds	r2, #1  34:	801a      	strh	r2, [r3, #0]  36:	1c3b      	adds	r3, r7, #0  38:	3314      	adds	r3, #20  3a:	1c3a      	adds	r2, r7, #0  3c:	3212      	adds	r2, #18  3e:	8812      	ldrh	r2, [r2, #0]  40:	801a      	strh	r2, [r3, #0]		while (wCounter--)   42:	e00f      	b.n	64 <pdwfnCorrelacion+0x64>		{			*pdwResultado += *(pbBufferSistema++)*(*(pbBufferEntrada++));  44:	68fb      	ldr	r3, [r7, #12]  46:	681a      	ldr	r2, [r3, #0]  48:	687b      	ldr	r3, [r7, #4]  4a:	781b      	ldrb	r3, [r3, #0]  4c:	6839      	ldr	r1, [r7, #0]  4e:	7809      	ldrb	r1, [r1, #0]  50:	434b      	muls	r3, r1  52:	18d2      	adds	r2, r2, r3  54:	68fb      	ldr	r3, [r7, #12]  56:	601a      	str	r2, [r3, #0]  58:	687b      	ldr	r3, [r7, #4]  5a:	3301      	adds	r3, #1  5c:	607b      	str	r3, [r7, #4]  5e:	683b      	ldr	r3, [r7, #0]  60:	3301      	adds	r3, #1  62:	603b      	str	r3, [r7, #0]	unsigned long *pdwResultado = &dwaResultado[0];	while(wInstancias--)	{		wCounter = ++wSoPsCounter; /*Se lleva la cuenta de cuantas sumas de productos deben hacerse ahora*/		while (wCounter--)   64:	1c3b      	adds	r3, r7, #0  66:	3314      	adds	r3, #20  68:	881b      	ldrh	r3, [r3, #0]  6a:	1e5a      	subs	r2, r3, #1  6c:	4193      	sbcs	r3, r2  6e:	b2db      	uxtb	r3, r3  70:	1c3a      	adds	r2, r7, #0  72:	3214      	adds	r2, #20  74:	1c39      	adds	r1, r7, #0  76:	3114      	adds	r1, #20  78:	8809      	ldrh	r1, [r1, #0]  7a:	3901      	subs	r1, #1  7c:	8011      	strh	r1, [r2, #0]  7e:	2b00      	cmp	r3, #0  80:	d1e0      	bne.n	44 <pdwfnCorrelacion+0x44>		{			*pdwResultado += *(pbBufferSistema++)*(*(pbBufferEntrada++));		}		pbBufferSistema -=  wSoPsCounter; /*Se regresan los apuntadores a la posicin debida para la siguiente suma de productos*/  82:	1c3b      	adds	r3, r7, #0  84:	3312      	adds	r3, #18  86:	881b      	ldrh	r3, [r3, #0]  88:	425b      	negs	r3, r3  8a:	687a      	ldr	r2, [r7, #4]  8c:	18d3      	adds	r3, r2, r3  8e:	607b      	str	r3, [r7, #4]		pbBufferEntrada -=  wSoPsCounter + 1;  90:	1c3b      	adds	r3, r7, #0  92:	3312      	adds	r3, #18  94:	881b      	ldrh	r3, [r3, #0]  96:	43db      	mvns	r3, r3  98:	683a      	ldr	r2, [r7, #0]  9a:	18d3      	adds	r3, r2, r3  9c:	603b      	str	r3, [r7, #0]		*(pdwResultado++) = 0;  9e:	68fb      	ldr	r3, [r7, #12]  a0:	2200      	movs	r2, #0  a2:	601a      	str	r2, [r3, #0]  a4:	68fb      	ldr	r3, [r7, #12]  a6:	3304      	adds	r3, #4  a8:	60fb      	str	r3, [r7, #12]	unsigned short wCounter = 0; /*Contador para los ciclos de sumas de productos*/	unsigned short wSoPsCounter = 0; /*Contador de las sumas de productos que se harn/hicieron*/	static unsigned long dwaResultado[SIZE*2 - 1]; /*Arreglo de retorno*/	unsigned long *pdwResultado = &dwaResultado[0];	while(wInstancias--)  aa:	1c3b      	adds	r3, r7, #0  ac:	3316      	adds	r3, #22  ae:	881b      	ldrh	r3, [r3, #0]  b0:	1e5a      	subs	r2, r3, #1  b2:	4193      	sbcs	r3, r2  b4:	b2db      	uxtb	r3, r3  b6:	1c3a      	adds	r2, r7, #0  b8:	3216      	adds	r2, #22  ba:	1c39      	adds	r1, r7, #0  bc:	3116      	adds	r1, #22  be:	8809      	ldrh	r1, [r1, #0]  c0:	3901      	subs	r1, #1  c2:	8011      	strh	r1, [r2, #0]  c4:	2b00      	cmp	r3, #0  c6:	d1af      	bne.n	28 <pdwfnCorrelacion+0x28>		pbBufferSistema -=  wSoPsCounter; /*Se regresan los apuntadores a la posicin debida para la siguiente suma de productos*/		pbBufferEntrada -=  wSoPsCounter + 1;		*(pdwResultado++) = 0;	}		wInstancias = SIZE - 1;  c8:	1c3b      	adds	r3, r7, #0  ca:	3316      	adds	r3, #22  cc:	4a2f      	ldr	r2, [pc, #188]	; (18c <pdwfnCorrelacion+0x18c>)  ce:	801a      	strh	r2, [r3, #0]	while(wInstancias--)  d0:	e043      	b.n	15a <pdwfnCorrelacion+0x15a>	{		pbBufferSistema += wSoPsCounter - 1; /*Se regresan los apuntadores a la posicin debida para la siguiente suma de productos*/  d2:	1c3b      	adds	r3, r7, #0  d4:	3312      	adds	r3, #18  d6:	881b      	ldrh	r3, [r3, #0]  d8:	3b01      	subs	r3, #1  da:	687a      	ldr	r2, [r7, #4]  dc:	18d3      	adds	r3, r2, r3  de:	607b      	str	r3, [r7, #4]		pbBufferEntrada += wSoPsCounter - 1;  e0:	1c3b      	adds	r3, r7, #0  e2:	3312      	adds	r3, #18  e4:	881b      	ldrh	r3, [r3, #0]  e6:	3b01      	subs	r3, #1  e8:	683a      	ldr	r2, [r7, #0]  ea:	18d3      	adds	r3, r2, r3  ec:	603b      	str	r3, [r7, #0]		wCounter = --wSoPsCounter; /*Se lleva la cuenta de cuantas sumas de productos deben hacerse ahora*/  ee:	1c3b      	adds	r3, r7, #0  f0:	3312      	adds	r3, #18  f2:	1c3a      	adds	r2, r7, #0  f4:	3212      	adds	r2, #18  f6:	8812      	ldrh	r2, [r2, #0]  f8:	3a01      	subs	r2, #1  fa:	801a      	strh	r2, [r3, #0]  fc:	1c3b      	adds	r3, r7, #0  fe:	3314      	adds	r3, #20 100:	1c3a      	adds	r2, r7, #0 102:	3212      	adds	r2, #18 104:	8812      	ldrh	r2, [r2, #0] 106:	801a      	strh	r2, [r3, #0]		while (wCounter--)  108:	e00f      	b.n	12a <pdwfnCorrelacion+0x12a>		{			*pdwResultado += *(pbBufferSistema--)*(*(pbBufferEntrada--)); 10a:	68fb      	ldr	r3, [r7, #12] 10c:	681a      	ldr	r2, [r3, #0] 10e:	687b      	ldr	r3, [r7, #4] 110:	781b      	ldrb	r3, [r3, #0] 112:	6839      	ldr	r1, [r7, #0] 114:	7809      	ldrb	r1, [r1, #0] 116:	434b      	muls	r3, r1 118:	18d2      	adds	r2, r2, r3 11a:	68fb      	ldr	r3, [r7, #12] 11c:	601a      	str	r2, [r3, #0] 11e:	687b      	ldr	r3, [r7, #4] 120:	3b01      	subs	r3, #1 122:	607b      	str	r3, [r7, #4] 124:	683b      	ldr	r3, [r7, #0] 126:	3b01      	subs	r3, #1 128:	603b      	str	r3, [r7, #0]	while(wInstancias--)	{		pbBufferSistema += wSoPsCounter - 1; /*Se regresan los apuntadores a la posicin debida para la siguiente suma de productos*/		pbBufferEntrada += wSoPsCounter - 1;		wCounter = --wSoPsCounter; /*Se lleva la cuenta de cuantas sumas de productos deben hacerse ahora*/		while (wCounter--)  12a:	1c3b      	adds	r3, r7, #0 12c:	3314      	adds	r3, #20 12e:	881b      	ldrh	r3, [r3, #0] 130:	1e5a      	subs	r2, r3, #1 132:	4193      	sbcs	r3, r2 134:	b2db      	uxtb	r3, r3 136:	1c3a      	adds	r2, r7, #0 138:	3214      	adds	r2, #20 13a:	1c39      	adds	r1, r7, #0 13c:	3114      	adds	r1, #20 13e:	8809      	ldrh	r1, [r1, #0] 140:	3901      	subs	r1, #1 142:	8011      	strh	r1, [r2, #0] 144:	2b00      	cmp	r3, #0 146:	d1e0      	bne.n	10a <pdwfnCorrelacion+0x10a>		{			*pdwResultado += *(pbBufferSistema--)*(*(pbBufferEntrada--));		}		pbBufferSistema++; /*Se incrementa una ltima vez este apuntador debido a que no se utilizar otro de sus elementos (se multiplicara por cero)*/ 148:	687b      	ldr	r3, [r7, #4] 14a:	3301      	adds	r3, #1 14c:	607b      	str	r3, [r7, #4]		*(pdwResultado++) = 0; 14e:	68fb      	ldr	r3, [r7, #12] 150:	2200      	movs	r2, #0 152:	601a      	str	r2, [r3, #0] 154:	68fb      	ldr	r3, [r7, #12] 156:	3304      	adds	r3, #4 158:	60fb      	str	r3, [r7, #12]		pbBufferEntrada -=  wSoPsCounter + 1;		*(pdwResultado++) = 0;	}		wInstancias = SIZE - 1;	while(wInstancias--) 15a:	1c3b      	adds	r3, r7, #0 15c:	3316      	adds	r3, #22 15e:	881b      	ldrh	r3, [r3, #0] 160:	1e5a      	subs	r2, r3, #1 162:	4193      	sbcs	r3, r2 164:	b2db      	uxtb	r3, r3 166:	1c3a      	adds	r2, r7, #0 168:	3216      	adds	r2, #22 16a:	1c39      	adds	r1, r7, #0 16c:	3116      	adds	r1, #22 16e:	8809      	ldrh	r1, [r1, #0] 170:	3901      	subs	r1, #1 172:	8011      	strh	r1, [r2, #0] 174:	2b00      	cmp	r3, #0 176:	d1ac      	bne.n	d2 <pdwfnCorrelacion+0xd2>			*pdwResultado += *(pbBufferSistema--)*(*(pbBufferEntrada--));		}		pbBufferSistema++; /*Se incrementa una ltima vez este apuntador debido a que no se utilizar otro de sus elementos (se multiplicara por cero)*/		*(pdwResultado++) = 0;	}	return dwaResultado; 178:	4b03      	ldr	r3, [pc, #12]	; (188 <pdwfnCorrelacion+0x188>)} 17a:	1c18      	adds	r0, r3, #0 17c:	46bd      	mov	sp, r7 17e:	b006      	add	sp, #24 180:	bd80      	pop	{r7, pc} 182:	46c0      	nop			; (mov r8, r8) 184:	000005dc 	.word	0x000005dc 188:	00000000 	.word	0x00000000			188: R_ARM_ABS32	.bss.dwaResultado.4073 18c:	000005db 	.word	0x000005dbDisassembly of section .text.dwfnFindEnergy:00000000 <dwfnFindEnergy>:unsigned long dwfnFindEnergy(unsigned long * pdwCorrelacion, unsigned short wSize){   0:	b580      	push	{r7, lr}   2:	b084      	sub	sp, #16   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	1c0a      	adds	r2, r1, #0   a:	1cbb      	adds	r3, r7, #2   c:	801a      	strh	r2, [r3, #0]	unsigned long dwCorrMax = 0;   e:	2300      	movs	r3, #0  10:	60fb      	str	r3, [r7, #12]	while(wSize--)  12:	e00e      	b.n	32 <dwfnFindEnergy+0x32>	{		if(*pdwCorrelacion++ > dwCorrMax) /*Se busca el valor mximo del arreglo*/  14:	687b      	ldr	r3, [r7, #4]  16:	681b      	ldr	r3, [r3, #0]  18:	68fa      	ldr	r2, [r7, #12]  1a:	429a      	cmp	r2, r3  1c:	419b      	sbcs	r3, r3  1e:	425b      	negs	r3, r3  20:	b2db      	uxtb	r3, r3  22:	687a      	ldr	r2, [r7, #4]  24:	3204      	adds	r2, #4  26:	607a      	str	r2, [r7, #4]  28:	2b00      	cmp	r3, #0  2a:	d002      	beq.n	32 <dwfnFindEnergy+0x32>		{			dwCorrMax = *pdwCorrelacion;  2c:	687b      	ldr	r3, [r7, #4]  2e:	681b      	ldr	r3, [r3, #0]  30:	60fb      	str	r3, [r7, #12]unsigned long dwfnFindEnergy(unsigned long * pdwCorrelacion, unsigned short wSize){	unsigned long dwCorrMax = 0;	while(wSize--)  32:	1cbb      	adds	r3, r7, #2  34:	881b      	ldrh	r3, [r3, #0]  36:	1e5a      	subs	r2, r3, #1  38:	4193      	sbcs	r3, r2  3a:	b2db      	uxtb	r3, r3  3c:	1cba      	adds	r2, r7, #2  3e:	1cb9      	adds	r1, r7, #2  40:	8809      	ldrh	r1, [r1, #0]  42:	3901      	subs	r1, #1  44:	8011      	strh	r1, [r2, #0]  46:	2b00      	cmp	r3, #0  48:	d1e4      	bne.n	14 <dwfnFindEnergy+0x14>		if(*pdwCorrelacion++ > dwCorrMax) /*Se busca el valor mximo del arreglo*/		{			dwCorrMax = *pdwCorrelacion;		}	}	return dwCorrMax;  4a:	68fb      	ldr	r3, [r7, #12]}  4c:	1c18      	adds	r0, r3, #0  4e:	46bd      	mov	sp, r7  50:	b004      	add	sp, #16  52:	bd80      	pop	{r7, pc}Disassembly of section .text.wfnFindMaxPeakLocation:00000000 <wfnFindMaxPeakLocation>:unsigned short wfnFindMaxPeakLocation(unsigned long * pdwCorrelacion, unsigned short wSize){   0:	b580      	push	{r7, lr}   2:	b084      	sub	sp, #16   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	1c0a      	adds	r2, r1, #0   a:	1cbb      	adds	r3, r7, #2   c:	801a      	strh	r2, [r3, #0]	unsigned long dwCorrMax = 0;   e:	2300      	movs	r3, #0  10:	60fb      	str	r3, [r7, #12]	unsigned short wLocation = 0;  12:	1c3b      	adds	r3, r7, #0  14:	330a      	adds	r3, #10  16:	2200      	movs	r2, #0  18:	801a      	strh	r2, [r3, #0]	while(wSize--)  1a:	e01b      	b.n	54 <wfnFindMaxPeakLocation+0x54>	{		if(*pdwCorrelacion++ > dwCorrMax) /*Se busca el valor mximo del arreglo*/  1c:	687b      	ldr	r3, [r7, #4]  1e:	681b      	ldr	r3, [r3, #0]  20:	68fa      	ldr	r2, [r7, #12]  22:	429a      	cmp	r2, r3  24:	419b      	sbcs	r3, r3  26:	425b      	negs	r3, r3  28:	b2db      	uxtb	r3, r3  2a:	687a      	ldr	r2, [r7, #4]  2c:	3204      	adds	r2, #4  2e:	607a      	str	r2, [r7, #4]  30:	1c3a      	adds	r2, r7, #0  32:	320a      	adds	r2, #10  34:	1c39      	adds	r1, r7, #0  36:	310a      	adds	r1, #10  38:	8809      	ldrh	r1, [r1, #0]  3a:	8011      	strh	r1, [r2, #0]  3c:	2b00      	cmp	r3, #0  3e:	d009      	beq.n	54 <wfnFindMaxPeakLocation+0x54>		{			dwCorrMax = *pdwCorrelacion;  40:	687b      	ldr	r3, [r7, #4]  42:	681b      	ldr	r3, [r3, #0]  44:	60fb      	str	r3, [r7, #12]			wLocation = (SIZE*2 - 1) - wSize; /*Se almacena la posicin en el buffer del valor mximo que se encuentre*/  46:	1c3b      	adds	r3, r7, #0  48:	330a      	adds	r3, #10  4a:	1cba      	adds	r2, r7, #2  4c:	8812      	ldrh	r2, [r2, #0]  4e:	490b      	ldr	r1, [pc, #44]	; (7c <wfnFindMaxPeakLocation+0x7c>)  50:	1a8a      	subs	r2, r1, r2  52:	801a      	strh	r2, [r3, #0]unsigned short wfnFindMaxPeakLocation(unsigned long * pdwCorrelacion, unsigned short wSize){	unsigned long dwCorrMax = 0;	unsigned short wLocation = 0;	while(wSize--)  54:	1cbb      	adds	r3, r7, #2  56:	881b      	ldrh	r3, [r3, #0]  58:	1e5a      	subs	r2, r3, #1  5a:	4193      	sbcs	r3, r2  5c:	b2db      	uxtb	r3, r3  5e:	1cba      	adds	r2, r7, #2  60:	1cb9      	adds	r1, r7, #2  62:	8809      	ldrh	r1, [r1, #0]  64:	3901      	subs	r1, #1  66:	8011      	strh	r1, [r2, #0]  68:	2b00      	cmp	r3, #0  6a:	d1d7      	bne.n	1c <wfnFindMaxPeakLocation+0x1c>			dwCorrMax = *pdwCorrelacion;			wLocation = (SIZE*2 - 1) - wSize; /*Se almacena la posicin en el buffer del valor mximo que se encuentre*/		}	}	return wLocation;  6c:	1c3b      	adds	r3, r7, #0  6e:	330a      	adds	r3, #10  70:	881b      	ldrh	r3, [r3, #0]}  72:	1c18      	adds	r0, r3, #0  74:	46bd      	mov	sp, r7  76:	b004      	add	sp, #16  78:	bd80      	pop	{r7, pc}  7a:	46c0      	nop			; (mov r8, r8)  7c:	00000bb7 	.word	0x00000bb7Disassembly of section .text.wfnFindPeriod:00000000 <wfnFindPeriod>:unsigned short wfnFindPeriod(unsigned long * pdwCorrelacion,  unsigned short wSize){   0:	b580      	push	{r7, lr}   2:	4f8d      	ldr	r7, [pc, #564]	; (238 <wfnFindPeriod+0x238>)   4:	44bd      	add	sp, r7   6:	af00      	add	r7, sp, #0   8:	6078      	str	r0, [r7, #4]   a:	1c0a      	adds	r2, r1, #0   c:	4b8b      	ldr	r3, [pc, #556]	; (23c <wfnFindPeriod+0x23c>)   e:	209e      	movs	r0, #158	; 0x9e  10:	0080      	lsls	r0, r0, #2  12:	19c0      	adds	r0, r0, r7  14:	18c3      	adds	r3, r0, r3  16:	801a      	strh	r2, [r3, #0]	/*Variables para la resta entre cada 2 picos encontrados*/	unsigned short wPeakLocation1 = 0;   18:	4989      	ldr	r1, [pc, #548]	; (240 <wfnFindPeriod+0x240>)  1a:	187b      	adds	r3, r7, r1  1c:	2200      	movs	r2, #0  1e:	801a      	strh	r2, [r3, #0]	unsigned short wPeakLocation2 = 0;  20:	229d      	movs	r2, #157	; 0x9d  22:	0092      	lsls	r2, r2, #2  24:	18bb      	adds	r3, r7, r2  26:	2200      	movs	r2, #0  28:	801a      	strh	r2, [r3, #0]	unsigned short wDiferencia = 0;  2a:	4886      	ldr	r0, [pc, #536]	; (244 <wfnFindPeriod+0x244>)  2c:	183b      	adds	r3, r7, r0  2e:	2200      	movs	r2, #0  30:	801a      	strh	r2, [r3, #0]	unsigned short wCounter = wSize;  32:	219c      	movs	r1, #156	; 0x9c  34:	0089      	lsls	r1, r1, #2  36:	187b      	adds	r3, r7, r1  38:	4a80      	ldr	r2, [pc, #512]	; (23c <wfnFindPeriod+0x23c>)  3a:	209e      	movs	r0, #158	; 0x9e  3c:	0080      	lsls	r0, r0, #2  3e:	19c0      	adds	r0, r0, r7  40:	1882      	adds	r2, r0, r2  42:	8812      	ldrh	r2, [r2, #0]  44:	801a      	strh	r2, [r3, #0]		/*Buffer para almacenar las diferencias entre picos encontrados*/	unsigned short waPeaks[300];	unsigned short *pwPeaks = &waPeaks[0];  46:	1c3b      	adds	r3, r7, #0  48:	3308      	adds	r3, #8  4a:	219b      	movs	r1, #155	; 0x9b  4c:	0089      	lsls	r1, r1, #2  4e:	19c9      	adds	r1, r1, r7  50:	600b      	str	r3, [r1, #0]		/*Contadores para comparar cada elemento del buffer de picos encontrados entre s*/	unsigned short wElementosEnBuffer = 0;  52:	4a7d      	ldr	r2, [pc, #500]	; (248 <wfnFindPeriod+0x248>)  54:	18bb      	adds	r3, r7, r2  56:	2200      	movs	r2, #0  58:	801a      	strh	r2, [r3, #0]	unsigned short wCounterAux = 0;  5a:	209a      	movs	r0, #154	; 0x9a  5c:	0080      	lsls	r0, r0, #2  5e:	183b      	adds	r3, r7, r0  60:	2200      	movs	r2, #0  62:	801a      	strh	r2, [r3, #0]		/*Variables para el clculo de moda de las diferencias entre los picos encontrados*/	unsigned short wDiferenciaAccum = 0;  64:	4979      	ldr	r1, [pc, #484]	; (24c <wfnFindPeriod+0x24c>)  66:	187b      	adds	r3, r7, r1  68:	2200      	movs	r2, #0  6a:	801a      	strh	r2, [r3, #0]	unsigned short wDiferenciasTop = 0;  6c:	2299      	movs	r2, #153	; 0x99  6e:	0092      	lsls	r2, r2, #2  70:	18bb      	adds	r3, r7, r2  72:	2200      	movs	r2, #0  74:	801a      	strh	r2, [r3, #0]	unsigned short wModa = 0;  76:	4876      	ldr	r0, [pc, #472]	; (250 <wfnFindPeriod+0x250>)  78:	183b      	adds	r3, r7, r0  7a:	2200      	movs	r2, #0  7c:	801a      	strh	r2, [r3, #0]	while(wCounter--)  7e:	e0bf      	b.n	200 <wfnFindPeriod+0x200>	{		if(*pdwCorrelacion > *(pdwCorrelacion - 1) && *pdwCorrelacion > *(pdwCorrelacion + 1)) /*Si el valor actual es mayor a los valores adyacentes*/  80:	687b      	ldr	r3, [r7, #4]  82:	681a      	ldr	r2, [r3, #0]  84:	687b      	ldr	r3, [r7, #4]  86:	3b04      	subs	r3, #4  88:	681b      	ldr	r3, [r3, #0]  8a:	429a      	cmp	r2, r3  8c:	d800      	bhi.n	90 <wfnFindPeriod+0x90>  8e:	e0b4      	b.n	1fa <wfnFindPeriod+0x1fa>  90:	687b      	ldr	r3, [r7, #4]  92:	681a      	ldr	r2, [r3, #0]  94:	687b      	ldr	r3, [r7, #4]  96:	3304      	adds	r3, #4  98:	681b      	ldr	r3, [r3, #0]  9a:	429a      	cmp	r2, r3  9c:	d800      	bhi.n	a0 <wfnFindPeriod+0xa0>  9e:	e0ac      	b.n	1fa <wfnFindPeriod+0x1fa>		{			if(wPeakLocation1 == wPeakLocation2) /*Se almacena la posicin del primer pico encontrado*/  a0:	4967      	ldr	r1, [pc, #412]	; (240 <wfnFindPeriod+0x240>)  a2:	187a      	adds	r2, r7, r1  a4:	209d      	movs	r0, #157	; 0x9d  a6:	0080      	lsls	r0, r0, #2  a8:	183b      	adds	r3, r7, r0  aa:	8812      	ldrh	r2, [r2, #0]  ac:	881b      	ldrh	r3, [r3, #0]  ae:	429a      	cmp	r2, r3  b0:	d10e      	bne.n	d0 <wfnFindPeriod+0xd0>			{				wPeakLocation1 = wSize - wCounter;  b2:	4963      	ldr	r1, [pc, #396]	; (240 <wfnFindPeriod+0x240>)  b4:	187b      	adds	r3, r7, r1  b6:	4a61      	ldr	r2, [pc, #388]	; (23c <wfnFindPeriod+0x23c>)  b8:	209e      	movs	r0, #158	; 0x9e  ba:	0080      	lsls	r0, r0, #2  bc:	19c0      	adds	r0, r0, r7  be:	1881      	adds	r1, r0, r2  c0:	209c      	movs	r0, #156	; 0x9c  c2:	0080      	lsls	r0, r0, #2  c4:	183a      	adds	r2, r7, r0  c6:	8809      	ldrh	r1, [r1, #0]  c8:	8812      	ldrh	r2, [r2, #0]  ca:	1a8a      	subs	r2, r1, r2  cc:	801a      	strh	r2, [r3, #0]  ce:	e094      	b.n	1fa <wfnFindPeriod+0x1fa>			}			else			{				wPeakLocation2 = wSize - wCounter; /*Se almacena la posicin del segundo pico encontrado*/  d0:	219d      	movs	r1, #157	; 0x9d  d2:	0089      	lsls	r1, r1, #2  d4:	187b      	adds	r3, r7, r1  d6:	4a59      	ldr	r2, [pc, #356]	; (23c <wfnFindPeriod+0x23c>)  d8:	209e      	movs	r0, #158	; 0x9e  da:	0080      	lsls	r0, r0, #2  dc:	19c0      	adds	r0, r0, r7  de:	1881      	adds	r1, r0, r2  e0:	209c      	movs	r0, #156	; 0x9c  e2:	0080      	lsls	r0, r0, #2  e4:	183a      	adds	r2, r7, r0  e6:	8809      	ldrh	r1, [r1, #0]  e8:	8812      	ldrh	r2, [r2, #0]  ea:	1a8a      	subs	r2, r1, r2  ec:	801a      	strh	r2, [r3, #0]				if(wPeakLocation1 > wPeakLocation2)  ee:	4954      	ldr	r1, [pc, #336]	; (240 <wfnFindPeriod+0x240>)  f0:	187a      	adds	r2, r7, r1  f2:	209d      	movs	r0, #157	; 0x9d  f4:	0080      	lsls	r0, r0, #2  f6:	183b      	adds	r3, r7, r0  f8:	8812      	ldrh	r2, [r2, #0]  fa:	881b      	ldrh	r3, [r3, #0]  fc:	429a      	cmp	r2, r3  fe:	d90b      	bls.n	118 <wfnFindPeriod+0x118>				{					wDiferencia = wPeakLocation1 - wPeakLocation2; 100:	4950      	ldr	r1, [pc, #320]	; (244 <wfnFindPeriod+0x244>) 102:	187b      	adds	r3, r7, r1 104:	4a4e      	ldr	r2, [pc, #312]	; (240 <wfnFindPeriod+0x240>) 106:	18b9      	adds	r1, r7, r2 108:	209d      	movs	r0, #157	; 0x9d 10a:	0080      	lsls	r0, r0, #2 10c:	183a      	adds	r2, r7, r0 10e:	8809      	ldrh	r1, [r1, #0] 110:	8812      	ldrh	r2, [r2, #0] 112:	1a8a      	subs	r2, r1, r2 114:	801a      	strh	r2, [r3, #0] 116:	e00a      	b.n	12e <wfnFindPeriod+0x12e>				}				else				{					wDiferencia = wPeakLocation2 - wPeakLocation1; 118:	494a      	ldr	r1, [pc, #296]	; (244 <wfnFindPeriod+0x244>) 11a:	187b      	adds	r3, r7, r1 11c:	229d      	movs	r2, #157	; 0x9d 11e:	0092      	lsls	r2, r2, #2 120:	18b9      	adds	r1, r7, r2 122:	4847      	ldr	r0, [pc, #284]	; (240 <wfnFindPeriod+0x240>) 124:	183a      	adds	r2, r7, r0 126:	8809      	ldrh	r1, [r1, #0] 128:	8812      	ldrh	r2, [r2, #0] 12a:	1a8a      	subs	r2, r1, r2 12c:	801a      	strh	r2, [r3, #0]				}				*pwPeaks = wDiferencia; /*Se guarda la distancia entre los picos en el buffer*/ 12e:	219b      	movs	r1, #155	; 0x9b 130:	0089      	lsls	r1, r1, #2 132:	19c9      	adds	r1, r1, r7 134:	680b      	ldr	r3, [r1, #0] 136:	4843      	ldr	r0, [pc, #268]	; (244 <wfnFindPeriod+0x244>) 138:	183a      	adds	r2, r7, r0 13a:	8812      	ldrh	r2, [r2, #0] 13c:	801a      	strh	r2, [r3, #0]				wElementosEnBuffer++; /*Contador de cuntos elementos tiene el buffer*/ 13e:	4942      	ldr	r1, [pc, #264]	; (248 <wfnFindPeriod+0x248>) 140:	187b      	adds	r3, r7, r1 142:	4841      	ldr	r0, [pc, #260]	; (248 <wfnFindPeriod+0x248>) 144:	183a      	adds	r2, r7, r0 146:	8812      	ldrh	r2, [r2, #0] 148:	3201      	adds	r2, #1 14a:	801a      	strh	r2, [r3, #0]				wCounterAux = wElementosEnBuffer; 14c:	219a      	movs	r1, #154	; 0x9a 14e:	0089      	lsls	r1, r1, #2 150:	187b      	adds	r3, r7, r1 152:	483d      	ldr	r0, [pc, #244]	; (248 <wfnFindPeriod+0x248>) 154:	183a      	adds	r2, r7, r0 156:	8812      	ldrh	r2, [r2, #0] 158:	801a      	strh	r2, [r3, #0]				pwPeaks = &waPeaks[0]; 15a:	1c3b      	adds	r3, r7, #0 15c:	3308      	adds	r3, #8 15e:	219b      	movs	r1, #155	; 0x9b 160:	0089      	lsls	r1, r1, #2 162:	19c9      	adds	r1, r1, r7 164:	600b      	str	r3, [r1, #0]				while(wCounterAux--)  166:	e019      	b.n	19c <wfnFindPeriod+0x19c>				{					if(wDiferencia == *pwPeaks) /*Si la diferencia encontrada se encuentra repetida en el buffer*/ 168:	229b      	movs	r2, #155	; 0x9b 16a:	0092      	lsls	r2, r2, #2 16c:	19d2      	adds	r2, r2, r7 16e:	6813      	ldr	r3, [r2, #0] 170:	881b      	ldrh	r3, [r3, #0] 172:	4834      	ldr	r0, [pc, #208]	; (244 <wfnFindPeriod+0x244>) 174:	183a      	adds	r2, r7, r0 176:	8812      	ldrh	r2, [r2, #0] 178:	429a      	cmp	r2, r3 17a:	d106      	bne.n	18a <wfnFindPeriod+0x18a>					{						wDiferenciaAccum++; /*Se acumulan cuntas veces se repiti ese valor*/ 17c:	4933      	ldr	r1, [pc, #204]	; (24c <wfnFindPeriod+0x24c>) 17e:	187b      	adds	r3, r7, r1 180:	4832      	ldr	r0, [pc, #200]	; (24c <wfnFindPeriod+0x24c>) 182:	183a      	adds	r2, r7, r0 184:	8812      	ldrh	r2, [r2, #0] 186:	3201      	adds	r2, #1 188:	801a      	strh	r2, [r3, #0]					}					pwPeaks++; 18a:	219b      	movs	r1, #155	; 0x9b 18c:	0089      	lsls	r1, r1, #2 18e:	19c9      	adds	r1, r1, r7 190:	680b      	ldr	r3, [r1, #0] 192:	3302      	adds	r3, #2 194:	229b      	movs	r2, #155	; 0x9b 196:	0092      	lsls	r2, r2, #2 198:	19d2      	adds	r2, r2, r7 19a:	6013      	str	r3, [r2, #0]				}				*pwPeaks = wDiferencia; /*Se guarda la distancia entre los picos en el buffer*/				wElementosEnBuffer++; /*Contador de cuntos elementos tiene el buffer*/				wCounterAux = wElementosEnBuffer;				pwPeaks = &waPeaks[0];				while(wCounterAux--)  19c:	209a      	movs	r0, #154	; 0x9a 19e:	0080      	lsls	r0, r0, #2 1a0:	183b      	adds	r3, r7, r0 1a2:	881b      	ldrh	r3, [r3, #0] 1a4:	1e5a      	subs	r2, r3, #1 1a6:	4193      	sbcs	r3, r2 1a8:	b2db      	uxtb	r3, r3 1aa:	219a      	movs	r1, #154	; 0x9a 1ac:	0089      	lsls	r1, r1, #2 1ae:	187a      	adds	r2, r7, r1 1b0:	209a      	movs	r0, #154	; 0x9a 1b2:	0080      	lsls	r0, r0, #2 1b4:	1839      	adds	r1, r7, r0 1b6:	8809      	ldrh	r1, [r1, #0] 1b8:	3901      	subs	r1, #1 1ba:	8011      	strh	r1, [r2, #0] 1bc:	2b00      	cmp	r3, #0 1be:	d1d3      	bne.n	168 <wfnFindPeriod+0x168>						wDiferenciaAccum++; /*Se acumulan cuntas veces se repiti ese valor*/					}					pwPeaks++;				}								if(wDiferenciaAccum > wDiferenciasTop) /*Si la diferencia es la que se encuentra ms veces repetida en el buffer*/ 1c0:	4922      	ldr	r1, [pc, #136]	; (24c <wfnFindPeriod+0x24c>) 1c2:	187a      	adds	r2, r7, r1 1c4:	2099      	movs	r0, #153	; 0x99 1c6:	0080      	lsls	r0, r0, #2 1c8:	183b      	adds	r3, r7, r0 1ca:	8812      	ldrh	r2, [r2, #0] 1cc:	881b      	ldrh	r3, [r3, #0] 1ce:	429a      	cmp	r2, r3 1d0:	d90c      	bls.n	1ec <wfnFindPeriod+0x1ec>				{					wDiferenciasTop = wDiferenciaAccum; /*Nuevo valor a vencer*/ 1d2:	2199      	movs	r1, #153	; 0x99 1d4:	0089      	lsls	r1, r1, #2 1d6:	187b      	adds	r3, r7, r1 1d8:	481c      	ldr	r0, [pc, #112]	; (24c <wfnFindPeriod+0x24c>) 1da:	183a      	adds	r2, r7, r0 1dc:	8812      	ldrh	r2, [r2, #0] 1de:	801a      	strh	r2, [r3, #0]					wModa = wDiferencia; /*Ese valor ser la moda*/ 1e0:	491b      	ldr	r1, [pc, #108]	; (250 <wfnFindPeriod+0x250>) 1e2:	187b      	adds	r3, r7, r1 1e4:	4817      	ldr	r0, [pc, #92]	; (244 <wfnFindPeriod+0x244>) 1e6:	183a      	adds	r2, r7, r0 1e8:	8812      	ldrh	r2, [r2, #0] 1ea:	801a      	strh	r2, [r3, #0]				}				wPeakLocation1 = wPeakLocation2; /*Se recorren las posiciones encontradas de los picos para comparar con la siguiente que se encuentre*/ 1ec:	4914      	ldr	r1, [pc, #80]	; (240 <wfnFindPeriod+0x240>) 1ee:	187b      	adds	r3, r7, r1 1f0:	209d      	movs	r0, #157	; 0x9d 1f2:	0080      	lsls	r0, r0, #2 1f4:	183a      	adds	r2, r7, r0 1f6:	8812      	ldrh	r2, [r2, #0] 1f8:	801a      	strh	r2, [r3, #0]			}		}		pdwCorrelacion++; 1fa:	687b      	ldr	r3, [r7, #4] 1fc:	3304      	adds	r3, #4 1fe:	607b      	str	r3, [r7, #4]	/*Variables para el clculo de moda de las diferencias entre los picos encontrados*/	unsigned short wDiferenciaAccum = 0;	unsigned short wDiferenciasTop = 0;	unsigned short wModa = 0;	while(wCounter--) 200:	219c      	movs	r1, #156	; 0x9c 202:	0089      	lsls	r1, r1, #2 204:	187b      	adds	r3, r7, r1 206:	881b      	ldrh	r3, [r3, #0] 208:	1e5a      	subs	r2, r3, #1 20a:	4193      	sbcs	r3, r2 20c:	b2db      	uxtb	r3, r3 20e:	209c      	movs	r0, #156	; 0x9c 210:	0080      	lsls	r0, r0, #2 212:	183a      	adds	r2, r7, r0 214:	209c      	movs	r0, #156	; 0x9c 216:	0080      	lsls	r0, r0, #2 218:	1839      	adds	r1, r7, r0 21a:	8809      	ldrh	r1, [r1, #0] 21c:	3901      	subs	r1, #1 21e:	8011      	strh	r1, [r2, #0] 220:	2b00      	cmp	r3, #0 222:	d000      	beq.n	226 <wfnFindPeriod+0x226> 224:	e72c      	b.n	80 <wfnFindPeriod+0x80>				wPeakLocation1 = wPeakLocation2; /*Se recorren las posiciones encontradas de los picos para comparar con la siguiente que se encuentre*/			}		}		pdwCorrelacion++;	}	return wModa; 226:	490a      	ldr	r1, [pc, #40]	; (250 <wfnFindPeriod+0x250>) 228:	187b      	adds	r3, r7, r1 22a:	881b      	ldrh	r3, [r3, #0]} 22c:	1c18      	adds	r0, r3, #0 22e:	46bd      	mov	sp, r7 230:	239e      	movs	r3, #158	; 0x9e 232:	009b      	lsls	r3, r3, #2 234:	449d      	add	sp, r3 236:	bd80      	pop	{r7, pc} 238:	fffffd88 	.word	0xfffffd88 23c:	fffffd8a 	.word	0xfffffd8a 240:	00000276 	.word	0x00000276 244:	00000272 	.word	0x00000272 248:	0000026a 	.word	0x0000026a 24c:	00000266 	.word	0x00000266 250:	00000262 	.word	0x00000262